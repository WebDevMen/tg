from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from datetime import datetime

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN = "8116556200:AAEGOcOjCGOV7jlKpUOHSjvthWc4bu2Zk64"
ADMIN_ID = 7709680213
CHAT_LINK = "https://t.me/+OGwp-EusOJVjODNi"

# === –ë–æ—Ç —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä ===
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# === –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
user_states = {}
STATE_DEFAULT = "DEFAULT"
STATE_END = "END"

# === –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è ===
async def send_greeting(message: types.Message):
    user_states[message.from_user.id] = STATE_DEFAULT
    await message.answer(
        "üîû –ü—Ä–∏–≤—ñ—Ç! –¢–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É –±–æ—Ç, —â–æ –ø—Ä–∏–π–º–∞—î –∑–∞—è–≤–∫–∏ –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ *Sin Sync* ‚Äî –º—ñ—Å—Ü—è, –¥–µ –∑—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –ø–∞—Ä–∏, –¥—ñ–≤—á–∞—Ç–∞, —è–∫—ñ –ø–æ–¥—ñ–ª—è—é—Ç—å —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ —Å–≤—ñ–Ω–≥—É, –Ω—É–¥–∏–∑–º—É —Ç–∞ –ë–î–°–ú.\n\n"
        "üö´ –û–¥–∏–Ω–∞–∫–∏ —á–æ–ª–æ–≤—ñ–∫–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—å—Å—è.\n\n"
        "–ß–∏ —Ö–æ—Ç—ñ–ª–∏ –± –≤–∏ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –¥–æ –Ω–∞—à–æ–≥–æ –∑–∞–∫—Ä–∏—Ç–æ–≥–æ —á–∞—Ç—É?\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å *–¢–∞–∫* –∞–±–æ *–ù—ñ*.",
        parse_mode="Markdown"
    )

# === –°—Ç–∞—Ä—Ç –∞–±–æ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ===
@dp.message_handler(commands=["start"])
@dp.message_handler(lambda msg: user_states.get(msg.from_user.id) is None or user_states.get(msg.from_user.id) == STATE_END)
async def handle_start(message: types.Message):
    await send_greeting(message)

# === –í—ñ–¥–ø–æ–≤—ñ–¥—å "–ù—ñ" ===
@dp.message_handler(Text(equals="–Ω—ñ", ignore_case=True))
async def handle_no(message: types.Message):
    user_states[message.from_user.id] = STATE_END
    await message.answer("–î–æ–±—Ä–µ, —è–∫—â–æ –∑–∞—Ö–æ—á–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —á–∞—Ç—É, –º–∏ –±—É–¥–µ–º–æ –≤–∞—Å —á–µ–∫–∞—Ç–∏. –ì–∞—Ä–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è.")

# === –í—ñ–¥–ø–æ–≤—ñ–¥—å "–¢–∞–∫" ===
@dp.message_handler(Text(equals="—Ç–∞–∫", ignore_case=True))
async def handle_yes(message: types.Message):
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    await message.answer(
        "üí° *–£–º–æ–≤–∏ –¥–ª—è –≤—Å—Ç—É–ø—É:*\n"
        "‚Ä¢ –ü–∞—Ä–∏ –∞–±–æ –¥—ñ–≤—á–∞—Ç–∞ –≤—ñ–¥ 18 —Ä–æ–∫—ñ–≤\n"
        "‚Ä¢ –ß–æ–ª–æ–≤—ñ–∫–∏-–æ–¥–∏–Ω–∞–∫–∏ ‚Äî –Ω–µ –ø—Ä–∏–π–º–∞—é—Ç—å—Å—è\n"
        "‚Ä¢ –ó–∞–ø–∏—à—ñ—Ç—å –≤—ñ–¥–µ–æ-–∫—Ä—É–∂–æ–∫, –≤ —è–∫–æ–º—É —Å–∫–∞–∂—ñ—Ç—å:\n\n"
        f"‚Äì \"–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –Ü–º'—è —á–æ–ª–æ–≤—ñ–∫–∞ —ñ –Ü–º'—è –¥—ñ–≤—á–∏–Ω–∏\" (–∞–±–æ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è ‚Äî —è–∫—â–æ –æ–¥–Ω–∞ –¥—ñ–≤—á–∏–Ω–∞)\n"
        f"‚Äì \"–Ø (–º–∏) —Ö–æ—á—É(-–º–æ) –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –≤ —á–∞—Ç Sin Sync\"\n"
        f"‚Äì \"–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç —á–∞—Å —ñ –¥–∞—Ç–∞: {now}\"\n"
        "‚Äì \"–ß–µ–∫–∞—é(—î–º–æ) –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –Ω–∞ –≤—Å—Ç—É–ø\"\n\n"
        "üì© –ü—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ‚Äî –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç ‚ö†Ô∏è –Ω–∞ –Ω—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–π—Ç–∏ —ñ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ",
        parse_mode="Markdown"
    )

# === –û–±—Ä–æ–±–∫–∞ –∫—Ä—É–∂–∫–∞ (–≤—ñ–¥–µ–æ-–Ω–æ—Ç–∞—Ç–∫–∏) ===
@dp.message_handler(content_types=types.ContentType.VIDEO_NOTE)
async def handle_video_note(message: types.Message):
    try:
        username = f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ username"
        await bot.send_video_note(ADMIN_ID, message.video_note.file_id)
        await bot.send_message(ADMIN_ID, f"üé• –ù–æ–≤–∏–π –∫—Ä—É–∂–æ–∫ –≤—ñ–¥ {username}")

        await message.answer(
            f"‚úÖ –í–∞—à–µ –≤—ñ–¥–µ–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É.\n"
            f"–ü–µ—Ä–µ—Ö–æ–¥—å—Ç–µ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–∞–ø–∏—Ç –¥–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è ‚¨áÔ∏è\n"
            f"üîó {CHAT_LINK}\n"
            f"üïê –ß–µ–∫–∞–π—Ç–µ –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–æ–º."
        )
        user_states[message.from_user.id] = STATE_END
    except Exception as e:
        await message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ.")
        print(f"[–ü–æ–º–∏–ª–∫–∞] {e}")

# === –ë—É–¥—å-—â–æ —ñ–Ω—à–µ ===
@dp.message_handler()
async def handle_other(message: types.Message):
    state = user_states.get(message.from_user.id)
    if state == STATE_END or state is None:
        await send_greeting(message)
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å *–¢–∞–∫* –∞–±–æ *–ù—ñ*.", parse_mode="Markdown")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)

# === –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Replit + UptimeRobot ===
from aiohttp import web
import threading

async def handle(request):
    return web.Response(text="Sin Sync Bot is running")

def run_webserver():
    app = web.Application()
    app.router.add_get("/", handle)
    web.run_app(app, port=8080)

threading.Thread(target=run_webserver).start()
